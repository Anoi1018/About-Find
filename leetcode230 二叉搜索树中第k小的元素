给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。

说明：
你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。

示例 1:
输入: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
输出: 1

代码示意：
一、中序遍历+迭代实现
var kthSmallest = function(root, k) {
    let stack = [],ans = [],node = root;
    while(node || stack.length){
        while(node){
            stack.push(node);
            node = node.left;
        }
        node = stack.pop();
        ans.push(node.val);
        if(ans.length === k) break;
        node = node.right;
    }
    return ans[k-1];
};
二、中序遍历+递归实现
var kthSmallest = function(root, k) {
    let ans;
    var inorderTraversal = function(root){
        if(!root || k<1) return ;
        inorderTraversal(root.left); //先遍历左子树
        if(--k === 0){
            ans = root.val; //取第k个节点的val 
            return ; //退出递归
        }
        inorderTraversal(root.right); //后遍历右子树
    }
    inorderTraversal(root);
    return ans;
};
