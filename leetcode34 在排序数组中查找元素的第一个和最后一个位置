给定一个按照升序排列的整数数组 nums ，和一个目标值 target 。找出给定目标值在数组中的开始位置和结束位置。

你的算法时间复杂度必须是 O(logn) 级别。

如果数组中不存在目标值，返回 [-1, -1] 。

示例 1:
输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]

示例 2:
输入: nums = [5,7,7,8,8,10], target = 6
输出: [-1,-1]

代码示意：
一、二分查找 + 线性查找 时间复杂度O（logn + n）
先通过二分查找找到目标值target 再从target出发找到第一个出现和最后一个出现的边界位置
var searchRange = function(nums, target) {
    let n = nums.length,ans = [-1,-1];
    if(!nums || !n || (n===1 && nums[0]!==target)) return ans;
    let left = 0,right = n-1,midIndex,mid;
    while(left <= right){
        midIndex = (left+right)>>1;
        mid = nums[midIndex];
        if(mid === target){
            let l = midIndex,r = midIndex;
            while(l>0 && nums[l-1] === target) l--;
            while(r<n-1 && nums[r+1]=== target) r++;
            ans[0] = l,ans[1] = r;
            break;
        }else if(mid<target){
            left = midIndex+1; //注意区分mid和midIndex 不要写错
        }else{
            right = midIndex-1;
        }
    }
    return ans;
};

二、两次二分查找 时间复杂度O（logn）
先二分查找找到firstIndex 再二分查找找到lastIndex 然后组合成数组返回
var searchRange = function(nums, target) {
    let n = nums.length,lastIndex;
    if(!nums || !n || (n===1 && nums[0]!==target)) return [-1,-1];
    let firstIndex = firstSearch(nums,target);
    if(firstIndex===-1) return [-1,-1]
    else lastIndex = secondSearch(nums,target);
    return [firstIndex,lastIndex];
};

var firstSearch = function(nums,target){
    let left = 0,right = nums.length-1,mid;
    while(left<right){ //循环出口 left === right
        mid = (left+right)>>1; //一个left 两个right mid向下取整 注意没有用Math.floor 则不能直接/2  要用>>1实现整除2
        if(nums[mid]<target){
            left = mid+1
        }else if(nums[mid]===target){
            right = mid; //左半部分找第一个
        }else{
            right = mid-1;
        }    
    }
    if(nums[left] === target) return left; 
    else return -1;//可能不能在数组中 返回-1 则停止后续lastIndex查找
}
var secondSearch = function(nums,target){
    let left = 0,right = nums.length-1,mid;
    while(left<right){
        mid = (left+right+1)>>1; //！！！两个left 要求mid向上取整 (left+right+1)>>1
        if(nums[mid]<target){
            left = mid+1
        }else if(nums[mid]===target){
            left = mid;
        }else{
            right = mid-1;
        }    
    }
    return left; //通过firstIndex 数组中一定存在目标元素 返回left即可
}
